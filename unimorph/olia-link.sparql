PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX owl: <http://www.w3.org/2002/07/owl#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX olias: <http://purl.org/olia/system.owl#>
PREFIX olia: <http://purl.org/olia/olia.owl#>
PREFIX oliat: <http://purl.org/olia/olia-top.owl#>
PREFIX udata:  <https://unimorph.github.io/>
PREFIX umodel: <http://purl.org/olia/unimorph/unimorph.owl#>
PREFIX apf: <http://jena.apache.org/ARQ/property#>
PREFIX lexinfo2: <http://www.lexinfo.net/ontology/2.0/lexinfo#>
PREFIX lexinfo: <http://www.lexinfo.net/ontology/3.0/lexinfo#>

# SELECT * #?form ?feats ?um ?oliaclass ?lobject ?lfeat ?lprop
CONSTRUCT {
 ?form a ?oliaclass; ?lprop ?lobject
}
WHERE {

  #########
  # query #
  #########

  # form => udata:feats
  #####################
  ?form udata:feats ?feats.

  # um => olia => lexinfo
  ########################
  # note that the Unimorph ontology doesn't use conventional olias:hasTag, etc.
  # instead, it assumes that tags are *broken* along ; and then matched against umodel:hasLabel

  GRAPH <olia/lexinfo2unimorph.ttl> {
      ?object a ?oliaclass; ?umprop ?c.
      FILTER(?umprop in (umodel:hasLabel,umodel:hasLabelStartingWith,umodel:hasLabelMatching))
      OPTIONAL { ?object ?lprop ?lobject FILTER(contains(str(?lobject),"lexinfo")) } # all versions ;)
  }

  FILTER(
    (?umprop = umodel:hasLabel && (?feats = ?c || strstarts(?feats,concat(?c,';')) || strends(?feats,concat(";",?c)) || contains(?feats,concat(";",?c,";"))) ) ||
    (?umprop = umodel:hasLabelStartingWith && strstarts(?feats,?c)) ||
    (?umprop = umodel:hasLabelMatching && ( exists { ?feat apf:strSplit (?feats ";") FILTER(regex(?c,?feat)) })))
}
